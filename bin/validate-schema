#!/usr/bin/env ruby

require "json"
require "optparse"
require_relative "../lib/json_schema"

def check_file!(file)
  if !File.exists?(file)
    $stderr.puts "validate-schema: #{file}: No such file or directory"
  end
end

def parse!(file)
  parser = JsonSchema::Parser.new
  if !(schema = parser.parse(JSON.parse(File.read(file))))
    $stderr.puts "Schema is invalid."
    print_errors!(file, errors)
  end
  schema
end

def print_errors!(file, errors)
  errors.each do |e|
    if e.schema
      $stdout.puts "#{file}: #{e.message}"
    else
      $stdout.puts e.message
    end
  end
  exit(1)
end

def print_usage!
  $stderr.puts "Usage: validate-schema <schema> <data>"
  exit(1)
end

extra_schemas = []
OptionParser.new { |opts|
  opts.on("-s", "--schema SCHEMA", "Additional schema to use for references") do |s|
    extra_schemas << s
  end
}.parse!

if !(schema_file = ARGV.shift)
  print_usage!
end

if !(data_file = ARGV.shift)
  print_usage!
end

check_file!(schema_file)
check_file!(data_file)

schema = parse!(schema_file)

store = JsonSchema::DocumentStore.new
extra_schemas.each do |extra_schema|
  extra_schema = parse!(extra_schema)
  store.add_uri_reference(extra_schema.uri, extra_schema)
end

expander = JsonSchema::ReferenceExpander.new
if !expander.expand(schema, store: store)
  $stderr.puts "Could not expand schema references."
  print_errors!(schema_file, expander.errors)
end

data = JSON.parse(File.read(data_file))
valid, errors = schema.validate(data)

if valid
  $stdout.puts "Schema and data are valid."
else
  $stderr.puts "Data is invalid."
  print_errors!(data_file, errors)
end
